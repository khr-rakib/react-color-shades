{"version":3,"sources":["assets/audio.mp3","components/Shade.jsx","components/Shades.jsx","components/ShadeInput.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Shade","shade","onColorCopy","useState","copied","setCopied","useEffect","interval","setInterval","clearInterval","text","hexString","onCopy","className","style","backgroundColor","Shades","color","shades","setShades","audioRef","useRef","isColor","Values","createShades","current","play","ref","src","require","map","ShadeInput","props","type","value","onChange","e","onInputChange","target","App","setColor","randomColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,mC,yICmC5BC,EAhCD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAAkB,EACZC,oBAAS,GADG,mBACjCC,EADiC,KACzBC,EADyB,KAExCC,qBAAU,WACR,IAAIC,EACJ,GAAc,GAAVH,EAIF,OAHAG,EAAWC,aAAY,WACrBH,GAAU,KACT,KACI,WACLI,cAAcF,MAGjB,CAACH,IAOJ,OACE,kBAAC,kBAAD,CAAiBM,KAAMT,EAAMU,YAAaC,OAAQ,kBALlDP,GAAU,QACVH,MAKE,yBAAKW,UAAU,QAAQC,MAAO,CAAEC,gBAAiBd,EAAMU,cACpDP,EACC,0BAAMS,UAAU,UAAhB,YAEA,8BAAOZ,EAAMU,gBCORK,EA9BA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACAd,mBAAS,IADT,mBACrBe,EADqB,KACbC,EADa,KAGtBC,EAAWC,mBAOjBf,qBAAU,WACJgB,IAAQL,IANO,WACnB,IAAMC,EAAS,IAAIK,IAAON,GAAOC,OAAO,GACxCC,EAAUD,GAKRM,KAED,CAACP,IAEJ,IAAMf,EAAc,WAClBkB,EAASK,QAAQC,QAGnB,OACE,yBAAKb,UAAU,UACb,2BAAOc,IAAKP,EAAUQ,IAAKC,EAAQ,MAClCX,EAAOY,KAAI,SAAC7B,GAAD,OACV,kBAAC,EAAD,CAAOA,MAAOA,EAAOC,YAAaA,SCV3B6B,EAjBI,SAACC,GAClB,OACE,yBAAKnB,UAAU,gBACb,yBAAKA,UAAU,WAEf,2BACEoB,KAAK,OACLpB,UAAU,cACVqB,MAAOF,EAAMf,MACbkB,SAAU,SAACC,GAAD,OAAOJ,EAAMK,cAAcD,EAAEE,OAAOJ,UAGhD,yBAAKrB,UAAU,a,gBCUN0B,MAlBf,WAAgB,IAAD,EACapC,mBAAS,QADtB,mBACNc,EADM,KACCuB,EADD,KAUb,OARAlC,qBAAU,WACRkC,EAASC,OACR,IAOD,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAYI,MAAOA,EAAOoB,cANR,SAACH,GACrBM,EAASN,MAMP,kBAAC,EAAD,CAAQjB,MAAOA,MCPDyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.032b96ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/audio.f12785be.mp3\";","import React, { useState, useEffect } from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nconst Shade = ({ shade, onColorCopy }) => {\r\n  const [copied, setCopied] = useState(false);\r\n  useEffect(() => {\r\n    let interval;\r\n    if (copied == true) {\r\n      interval = setInterval(() => {\r\n        setCopied(false);\r\n      }, 1000);\r\n      return () => {\r\n        clearInterval(interval);\r\n      };\r\n    }\r\n  }, [copied]);\r\n\r\n  const onCopy = () => {\r\n    setCopied(true);\r\n    onColorCopy();\r\n  };\r\n\r\n  return (\r\n    <CopyToClipboard text={shade.hexString()} onCopy={() => onCopy()}>\r\n      <div className=\"shade\" style={{ backgroundColor: shade.hexString() }}>\r\n        {copied ? (\r\n          <span className=\"copied\">copied !</span>\r\n        ) : (\r\n          <span>{shade.hexString()}</span>\r\n        )}\r\n      </div>\r\n    </CopyToClipboard>\r\n  );\r\n};\r\n\r\nexport default Shade;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Values from \"values.js\";\r\nimport isColor from \"is-color\";\r\nimport Shade from \"./Shade\";\r\n\r\nconst Shades = ({ color }) => {\r\n  const [shades, setShades] = useState([]);\r\n\r\n  const audioRef = useRef();\r\n\r\n  const createShades = () => {\r\n    const shades = new Values(color).shades(1);\r\n    setShades(shades);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isColor(color)) {\r\n      createShades();\r\n    }\r\n  }, [color]);\r\n\r\n  const onColorCopy = () => {\r\n    audioRef.current.play();\r\n  };\r\n\r\n  return (\r\n    <div className=\"shades\">\r\n      <audio ref={audioRef} src={require(\"../assets/audio.mp3\")}></audio>\r\n      {shades.map((shade) => (\r\n        <Shade shade={shade} onColorCopy={onColorCopy} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Shades;\r\n","import React from \"react\";\r\n\r\nconst ShadeInput = (props) => {\r\n  return (\r\n    <div className=\"shade-search\">\r\n      <div className=\"emojis\"></div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        className=\"shade-input\"\r\n        value={props.color}\r\n        onChange={(e) => props.onInputChange(e.target.value)}\r\n      />\r\n\r\n      <div className=\"emojis\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShadeInput;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Shades from \"./components/Shades\";\nimport ShadeInput from \"./components/ShadeInput\";\nimport randomColor from \"randomcolor\";\n\nfunction App() {\n  const [color, setColor] = useState(\"#000\");\n  useEffect(() => {\n    setColor(randomColor);\n  }, []);\n\n  const onInputChange = (value) => {\n    setColor(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <ShadeInput color={color} onInputChange={onInputChange} />\n      <Shades color={color} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}